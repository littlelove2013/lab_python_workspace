1、
Q:发现迭代运算出来和卷积运算出来的结果不一样
A:结果发现是因为匹配的点对并不是一一对应的，而可能是一对多的
2、
Q:那不是一一对应的，到底是一对多，还是多对一，还是多对多呢？
A;多对多的
3、
Q：怎么在一个二维矩阵里处理多对多的情况呢？
A：暂时还没想到
A2：决定将重复值映射到重复位置的alpha邻域内。
Q:那如果邻域内本来的值怎么办？如果有多个重复值怎么办？
A2:首先特征点在原图中因为局部极大值约束，所以是一个在局部也很稀疏的矩阵
    其次，划定一个邻域，在邻域某个位置开始，采用线性探测法，找到下一个空的值，如果不存在空值则增加邻域范围或者剔除该点
Q:那对于图像配准之类对像素位置要求很准确的算法如何解？
A:二维生成一个偏置矩阵，对每一个特征点，记录其到正确位置的偏置，如果为(0,0)则表示在正确位置，如果为(-1,-1)则表示当前位置左上一个像素
4、
Q:为什么开始没注意到匹配点是多对多的？
A:因为前期工作没做好，疏忽了

5、对于阈值thre得到nan的问题，找到bug在哪里了，是因为得到的thre值为-0，其开方为nan，所以出错了！

6、
Q:在做网格匹配想减的时候，忘了考虑当两个网格标签为相同值的时候，因为特征点为稀疏矩阵，存在大量的0元素，所以相同值会导致大量的
0元素想减也为0，这样就会对结果产生很大干扰
A:在做完矩阵想减之后，再与上一个标记其位置是否有特征点的矩阵（leftimg>1），则解决该问题

7、测试高斯卷积核的效果是否比原来的好？
    a、在（20x20）网格下，sigma=1，neiborwidth为4（即上下左右4个邻居），下测试img1，img2效果比原效果更好

8、不区分网格而直接对所有特征点的进行筛选：
    a、不用计算最匹配网格，因为第一步计算的最匹配特征点对就已经计算过了
    b、不能计算A-B==Al-Bl的和，因为去除网格后，其点阵不一定再对齐和相等。所以改为计算，|A-B-(Al-Bl)|的和，越小越好。
    因为A-B对所有特征点一致，而Al-Bl为当前计算点的匹配label之差，是一个标量，所以其计算量很低

9、明显，使用高斯核的效果比只使用求和核的效果好，但是看的邻域更广。

10、如果要抗旋转怎么办？
    a、分别计算每个角度的邻域值，大概只需要计算8个方向，少一点也可以计算4个方向的值
    b、将标签不在设置为1->400,而是按照其横纵坐标作为其标签，这样计算时，可以计算两标签与中心点的距离的差，作为其邻域距离，比如：
        k1(x1,y1)->k2(x2,y2)，中心点k(x,y)->(x',y'),则其邻域距离为：[(x1-x)^2+(y1-y)^2]-[(x2-x')^2+(y2-y')^2],这个可以抗旋转

 11、更新label为行列，即解决抗旋转问题，但是，发现错误的匹配点较多，不规则，不知道哪一步有问题，再找